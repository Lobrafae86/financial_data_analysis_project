/*
===============================================
DDL: Script: Create Gold Views
===============================================
Script Purpose:
    This script creates the view for the gold
    layer in the data. 
    The view performs the unifications of the 
    queries Balance Sheet and Income Statement
    with the purpose of creating the viz needed
    for the analysis.

Usage: 
    - The view can be queried directly for 
    analytics and reporting.
===============================================
/*

CREATE OR ALTER PROCEDURE gold.load_goldr AS
BEGIN
    DECLARE @start_time DATETIME, @end_time DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME
    BEGIN TRY
        SET @batch_start_time = GETDATE();
        PRINT '=====================================================';
        PRINT 'Loading Gold Layer';
        PRINT '=====================================================';

        PRINT '-----------------------------------------------------';
        PRINT 'Loading table to calculate ROE';
        PRINT '-----------------------------------------------------';
        
        -- Use DROP TABLE IF EXISTS to prevent 'object already exists' error.
        IF OBJECT_ID('gold.roe') IS NOT NULL
        BEGIN
            DROP TABLE gold.roe;
        END

        SET @start_time = GETDATE();
--Creating Roe
SELECT
    Company,
    Year,
    SUM(CASE 
            WHEN Account_Description = 'NET INCOME' THEN CAST(REPLACE(Amount, ',', '') AS BIGINT) 
            ELSE 0 
            END) AS Net_Income,
    SUM(CASE 
            WHEN Account_Description = 'Common Stock Equity' THEN CAST(REPLACE(Amount, ',', '') AS BIGINT) 
            ELSE 0 
            END) AS Common_Stock_Equity,
    CAST(
        (SUM(CASE
                 WHEN Account_Description = 'NET INCOME' THEN CAST(REPLACE(Amount, ',', '') AS BIGINT) 
                      ELSE 0 
                      END) /
        SUM(CASE 
                 WHEN Account_Description = 'Common Stock Equity' THEN CAST(REPLACE(Amount, ',', '') AS BIGINT) 
                 ELSE 0 
                 END))
    AS DECIMAL(18, 2)) AS ROE
INTO 
    gold.roe
FROM gold.bsis
WHERE Account_Description IN ('NET INCOME', 'Common Stock Equity')
GROUP BY Company, Year
ORDER BY Company, Year;
SET @end_time = GETDATE();
        PRINT '>>Load duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds'
        PRINT '>>--------------------------------------------------'

        PRINT '-----------------------------------------------------';
        PRINT 'Loading table to calculate ROA';
        PRINT '-----------------------------------------------------';
        
        -- Use DROP TABLE IF EXISTS to prevent 'object already exists' error.
        IF OBJECT_ID('gold.roa') IS NOT NULL
        BEGIN
            DROP TABLE gold.roa;
        END

        SET @start_time = GETDATE();
-- Creating ROA
SELECT
    Company,
    Year,
    SUM(CASE 
            WHEN Account_Description = 'NET INCOME' THEN CAST(REPLACE(Amount, ',', '') AS BIGINT) 
            ELSE 0 
            END) AS Net_Income,
    SUM(CASE 
            WHEN Account_Description = 'Total Assets' THEN CAST(REPLACE(Amount, ',', '') AS BIGINT) 
            ELSE 0 
            END) AS Total_Assets,
    CAST(
        (SUM(CASE 
                WHEN Account_Description = 'NET INCOME' THEN CAST(REPLACE(Amount, ',', '') AS BIGINT) 
                ELSE 0 
                END) /
        SUM(CASE 
                WHEN Account_Description = 'TOTAL ASSETS' THEN CAST(REPLACE(Amount, ',', '') AS BIGINT) 
                ELSE 0 
                END))
    AS DECIMAL(18, 2)) AS ROA
INTO 
    gold.roa
FROM gold.bsis
WHERE Account_Description IN ('NET INCOME', 'TOTAL ASSETS')
GROUP BY Company, Year
ORDER BY Company, Year;
SET @end_time = GETDATE();
        PRINT '>>Load duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds'
        PRINT '>>--------------------------------------------------'

        PRINT '==================================================='
        PRINT 'Loading union of tables Balance Sheet and Income Statement'
        PRINT '==================================================='
        
        -- Use DROP TABLE IF EXISTS to prevent 'object already exists' error.
        IF OBJECT_ID('gold.bsis') IS NOT NULL
        BEGIN
            DROP TABLE gold.bsis;
        END
--Union all on balance sheet & income statement to create dashboard
--Create view
SET @start_time = GETDATE();
CREATE gold.balance_income AS
SELECT *
FROM silver.balance_sheet
UNION ALL
SELECT *
FROM silver.income_statement
SET @end_time = GETDATE();
        PRINT '>>Load duration: ' + CAST(DATEDIFF(SECOND, @start_time, @end_time) AS NVARCHAR) + ' seconds'
        PRINT '>>--------------------------------------------------'
        
        SET @batch_end_time = GETDATE();
        PRINT '===================================================='
        PRINT 'Loading gold layer is completed';
        PRINT 'Total load duration: ' + CAST(DATEDIFF(SECOND, @batch_start_time, @batch_end_time) AS NVARCHAR) + ' seconds'
        PRINT '===================================================='
    END TRY
    BEGIN CATCH
        PRINT '===================================================='
        PRINT 'ERROR OCCURED DURING LOADING SILVER LAYER'
        PRINT 'Error Message: ' + ERROR_MESSAGE();
        PRINT 'Error Number: ' + CAST(ERROR_NUMBER() AS NVARCHAR);
        PRINT 'Error State: ' + CAST(ERROR_STATE() AS NVARCHAR);
        PRINT '===================================================='
    END CATCH
END;
